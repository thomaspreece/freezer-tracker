import { createSlice } from '@reduxjs/toolkit';

export const SORTS={
  DEFAULT: "Default",
  ALPHA_ASC: "Alphabetical (Asc)",
  ALPHA_DSC: "Alphabetical (Dsc)",
  ADDED: "Added"
}

const initialState = {
  filter: "",
  sort: SORTS.DEFAULT,
};


export const filtersSlicer = createSlice({
  name: 'filters',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setFilter: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.filter = action.payload;
    },
    setSort: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      if(Object.values(SORTS).includes(action.payload)) {
        state.sort = action.payload;
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const {
  setFilter,
  setSort,
} = filtersSlicer.actions;

export default filtersSlicer.reducer;
