import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { v4 as uuidv4 } from 'uuid';

const initialState = {
  items: [],
  status: 'idle',
};


export const freezerItemsSlicer = createSlice({
  name: 'freezerItems',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    add: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.items.push({
        count: 0,
        ...action.payload,
        id: uuidv4(),
      });
    },
    addMany: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.items = state.items.concat(action.payload.map((item) => ({
        count: 0,
        ...item,
        id: uuidv4(),
      })));
    },
    removeById: (state, action) => {
      const index = state.items.findIndex((item) => item.id === action.payload)
      if(index !== -1){
        state.items.splice(index,1)
      }
    },
    incrementById: (state, action) => {
      console.log("Increase")
      const index = state.items.findIndex((item) => item.id === action.payload)
      if(index !== -1){
        state.items[index].count += 1
      }
    },
    decrementById: (state, action) => {
      console.log("Decrease")
      const index = state.items.findIndex((item) => item.id === action.payload)
      if(index !== -1 && state.items[index].count > 0){
        state.items[index].count -= 1
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const {
  add,
  addMany,
  removeById,
  incrementById,
  decrementById,
} = freezerItemsSlicer.actions;

export default freezerItemsSlicer.reducer;
